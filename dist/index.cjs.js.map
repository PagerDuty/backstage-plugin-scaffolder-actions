{"version":3,"file":"index.cjs.js","sources":["../src/auth/auth.ts","../src/apis/pagerduty.ts","../src/actions/custom.ts","../src/module.ts"],"sourcesContent":["import {\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport {\n  HttpError,\n  PagerDutyAccountConfig,\n} from '@pagerduty/backstage-plugin-common';\nimport { Config } from '@backstage/config';\n\nexport type LoadAuthConfigProps = {\n  config: RootConfigService | undefined;\n  legacyConfig: Config;\n  logger: LoggerService;\n};\n\ntype JsonValue = boolean | number | string | null | JsonArray | JsonObject;\n\ninterface JsonObject {\n  [x: string]: JsonValue;\n}\n\ntype JsonArray = JsonValue[];\n\ntype AccountTokenInfo = {\n  authToken: string;\n  authTokenExpiryDate: number;\n};\n\ntype Auth = {\n  accountTokens: Record<string, AccountTokenInfo>;\n  defaultAccount?: string;\n  config?: RootConfigService;\n  legacyConfig?: Config;\n  logger?: LoggerService;\n};\n\nlet authPersistence: Auth;\nlet isLegacyConfig = false;\nlet _config: RootConfigService | undefined;\nlet _legacyConfig: Config;\nlet _logger: LoggerService;\n\nasync function checkForOAuthToken(tokenId: string): Promise<boolean> {\n  if (\n    authPersistence.accountTokens[tokenId]?.authToken !== '' &&\n    authPersistence.accountTokens[tokenId]?.authToken.includes('Bearer')\n  ) {\n    if (\n      authPersistence.accountTokens[tokenId].authTokenExpiryDate > Date.now()\n    ) {\n      return true;\n    }\n    _logger.info('OAuth token expired, renewing');\n    await loadAuthConfig({\n      config: _config,\n      legacyConfig: _legacyConfig,\n      logger: _logger,\n    });\n    return (\n      authPersistence.accountTokens[tokenId].authTokenExpiryDate > Date.now()\n    );\n  }\n  return false;\n}\n\nexport async function getAuthToken(accountId?: string): Promise<string> {\n  // if authPersistence is not initialized, load the auth config\n  if (!authPersistence?.accountTokens) {\n    _logger.debug('Auth config not loaded. Loading auth config...');\n    await loadAuthConfig({\n      config: _config,\n      legacyConfig: _legacyConfig,\n      logger: _logger,\n    });\n  }\n\n  if (isLegacyConfig) {\n    _logger.debug('Using legacy config for auth token retrieval.');\n    if (\n      authPersistence.accountTokens.default.authToken !== '' &&\n      ((await checkForOAuthToken('default')) ||\n        authPersistence.accountTokens.default.authToken.includes('Token'))\n    ) {\n      return authPersistence.accountTokens.default.authToken;\n    }\n  } else {\n    _logger.debug('Using new config for auth token retrieval.');\n    // check if accountId is provided\n    if (accountId && accountId !== '') {\n      if (\n        authPersistence.accountTokens[accountId]?.authToken !== '' &&\n        ((await checkForOAuthToken(accountId)) ||\n          authPersistence.accountTokens[accountId]?.authToken.includes('Token'))\n      ) {\n        return authPersistence.accountTokens[accountId].authToken;\n      }\n    } else {\n      // return default account token if accountId is not provided\n      const defaultFallback = authPersistence.defaultAccount ?? '';\n      _logger.debug('No account ID provided. Using default account token.');\n\n      if (\n        authPersistence.accountTokens[defaultFallback]?.authToken !== '' &&\n        ((await checkForOAuthToken(defaultFallback)) ||\n          authPersistence.accountTokens[defaultFallback]?.authToken.includes(\n            'Token',\n          ))\n      ) {\n        return authPersistence.accountTokens[defaultFallback].authToken;\n      }\n    }\n  }\n\n  return '';\n}\n\nexport async function loadAuthConfig({\n  config,\n  legacyConfig,\n  logger,\n}: LoadAuthConfigProps) {\n  try {\n    const defaultAccountId = 'default';\n\n    // set config and logger\n    _config = config;\n    _legacyConfig = legacyConfig;\n    _logger = logger;\n\n    // initiliaze the authPersistence in-memory object\n    authPersistence = {\n      accountTokens: {},\n      config: _config,\n      legacyConfig: _legacyConfig,\n      logger: _logger,\n    };\n\n    // check if new accounts config is present\n    if (!readOptionalObject('pagerDuty.accounts')) {\n      isLegacyConfig = true;\n      logger.warn(\n        'No PagerDuty accounts configuration found in config file. Reverting to legacy configuration.',\n      );\n\n      if (!readOptionalString('pagerDuty.apiToken')) {\n        logger.warn(\n          'No PagerDuty API token found in config file. Trying OAuth token instead...',\n        );\n\n        if (!readOptionalObject('pagerDuty.oauth')) {\n          logger.error(\n            'No PagerDuty OAuth configuration found in config file.',\n          );\n        } else if (\n          !readOptionalString('pagerDuty.oauth.clientId') ||\n          !readOptionalString('pagerDuty.oauth.clientSecret') ||\n          !readOptionalString('pagerDuty.oauth.subDomain')\n        ) {\n          logger.error(\n            \"Missing required PagerDuty OAuth parameters in config file. 'clientId', 'clientSecret', and 'subDomain' are required. 'region' is optional.\",\n          );\n        } else {\n          const tokenInfo: AccountTokenInfo = await getOAuthToken(\n            readString('pagerDuty.oauth.clientId'),\n            readString('pagerDuty.oauth.clientSecret'),\n            readString('pagerDuty.oauth.subDomain'),\n            readOptionalString('pagerDuty.oauth.region') ?? 'us',\n          );\n\n          authPersistence.accountTokens[defaultAccountId] = tokenInfo;\n\n          logger.debug('PagerDuty OAuth configuration loaded successfully.');\n        }\n      } else {\n        authPersistence.accountTokens[defaultAccountId] = {\n          authToken: `Token token=${readOptionalString('pagerDuty.apiToken')}`,\n          authTokenExpiryDate: Date.now() + 3600000 * 24 * 365 * 2, // 2 years\n        };\n\n        logger.debug('PagerDuty API token loaded successfully.');\n      }\n    } else {\n      // new accounts config is present\n      logger.debug(\n        'New PagerDuty accounts configuration found in config file.',\n      );\n      isLegacyConfig = false;\n\n      const accounts: PagerDutyAccountConfig[] = JSON.parse(\n        JSON.stringify(readOptionalObject('pagerDuty.accounts')),\n      );\n\n      if (accounts && accounts?.length === 1) {\n        logger.debug(\n          'Only one account found in config file. Setting it as default.',\n        );\n        authPersistence.defaultAccount = accounts[0].id;\n      }\n\n      await Promise.all(\n        accounts?.map(async account => {\n          const maskedAccountId = maskString(account.id);\n\n          if (account.isDefault && !authPersistence.defaultAccount) {\n            logger.debug(\n              `Default account found in config file. Setting it as default.`,\n            );\n            authPersistence.defaultAccount = account.id;\n          }\n\n          if (!account.apiToken) {\n            logger.warn(\n              'No PagerDuty API token found in config file. Trying OAuth token instead...',\n            );\n\n            if (!account.oauth) {\n              logger.error(\n                'No PagerDuty OAuth configuration found in config file.',\n              );\n            } else if (\n              !account.oauth.clientId ||\n              !account.oauth.clientSecret ||\n              !account.oauth.subDomain\n            ) {\n              logger.error(\n                \"Missing required PagerDuty OAuth parameters in config file. 'clientId', 'clientSecret', and 'subDomain' are required. 'region' is optional.\",\n              );\n            } else {\n              const tokenInfo: AccountTokenInfo = await getOAuthToken(\n                account.oauth.clientId,\n                account.oauth.clientSecret,\n                account.oauth.subDomain,\n                account.oauth.region ?? 'us',\n              );\n\n              authPersistence.accountTokens[account.id] = tokenInfo;\n\n              logger.debug(\n                `PagerDuty OAuth configuration loaded successfully for account ${maskedAccountId}.`,\n              );\n            }\n          } else {\n            authPersistence.accountTokens[account.id] = {\n              authToken: `Token token=${account.apiToken}`,\n              authTokenExpiryDate: Date.now() + 3600000 * 24 * 365 * 2, // 2 years\n            };\n\n            logger.debug(\n              `PagerDuty API token loaded successfully for account ${maskedAccountId}.`,\n            );\n          }\n        }),\n      );\n\n      if (!authPersistence.defaultAccount) {\n        logger.error(\n          'No default account found in config file. One account must be marked as default.',\n        );\n      }\n    }\n  } catch (error) {\n    logger.error(\n      `Unable to retrieve valid PagerDuty AUTH configuration from config file: ${error}`,\n    );\n  }\n}\n\nfunction readOptionalString(key: string): string | undefined {\n  if (!_config) {\n    return _legacyConfig.getOptionalString(key);\n  }\n\n  return _config.getOptionalString(key);\n}\n\nfunction readOptionalObject(key: string): JsonValue | undefined {\n  if (!_config) {\n    return _legacyConfig.getOptional(key);\n  }\n\n  return _config.getOptional(key);\n}\n\nfunction readString(key: string): string {\n  if (!_config) {\n    return _legacyConfig.getString(key);\n  }\n\n  return _config.getString(key);\n}\n\nasync function getOAuthToken(\n  clientId: string,\n  clientSecret: string,\n  subDomain: string,\n  region: string,\n): Promise<AccountTokenInfo> {\n  // check if required parameters are provided\n  if (!clientId || !clientSecret || !subDomain) {\n    throw new Error('Missing required PagerDuty OAuth parameters.');\n  }\n\n  // define the scopes required for the OAuth token\n  const scopes = `\n        abilities.read \n        analytics.read\n        change_events.read \n        escalation_policies.read \n        incidents.read \n        oncalls.read \n        schedules.read \n        services.read \n        services.write \n        standards.read\n        teams.read \n        users.read \n        vendors.read\n    `;\n\n  // encode the parameters for the request\n  const urlencoded = new URLSearchParams();\n  urlencoded.append('grant_type', 'client_credentials');\n  urlencoded.append('client_id', clientId);\n  urlencoded.append('client_secret', clientSecret);\n  urlencoded.append('scope', `as_account-${region}.${subDomain} ${scopes}`);\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: urlencoded,\n  };\n  const baseUrl = 'https://identity.pagerduty.com/oauth/token';\n\n  try {\n    response = await fetch(baseUrl, options);\n  } catch (error) {\n    throw new Error(`Failed to retrieve oauth token: ${error}`);\n  }\n\n  switch (response.status) {\n    case 400:\n      throw new HttpError(\n        'Failed to retrieve valid token. Bad Request - Invalid arguments provided.',\n        400,\n      );\n    case 401:\n      throw new HttpError(\n        'Failed to retrieve valid token. Forbidden - Invalid credentials provided.',\n        401,\n      );\n    default: // 200\n      break;\n  }\n\n  const authResponse = await response.json();\n\n  const result: AccountTokenInfo = {\n    authToken: `Bearer ${authResponse.access_token}`,\n    authTokenExpiryDate: Date.now() + authResponse.expires_in * 1000,\n  };\n\n  return result;\n}\n\nfunction maskString(str: string): string {\n  return str[0] + '*'.repeat(str.length - 2) + str.slice(-1);\n}\n","import fetch from 'node-fetch';\nimport type { RequestInit, Response } from 'node-fetch';\n\nimport { getAuthToken } from '../auth/auth';\nimport { CreateServiceResponse } from '../types';\n\nimport {\n  PagerDutyServiceResponse,\n  PagerDutyIntegrationResponse,\n  PagerDutyAbilitiesResponse,\n  PagerDutyAccountConfig,\n  PagerDutyEscalationPolicy,\n  HttpError,\n  PagerDutyEscalationPoliciesResponse,\n} from '@pagerduty/backstage-plugin-common';\nimport {\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\n\ntype JsonValue = boolean | number | string | null | JsonArray | JsonObject;\n\ninterface JsonObject {\n  [x: string]: JsonValue;\n}\n\ntype JsonArray = JsonValue[];\n\nexport type LoadEndpointConfigProps = {\n  config: RootConfigService | undefined;\n  legacyConfig: Config;\n  logger: LoggerService;\n};\n\nexport type PagerDutyEndpointConfig = {\n  eventsBaseUrl: string;\n  apiBaseUrl: string;\n};\n\nconst EndpointConfig: Record<string, PagerDutyEndpointConfig> = {};\nlet fallbackEndpointConfig: PagerDutyEndpointConfig;\nlet isLegacyConfig = false;\n\nlet _config: RootConfigService | undefined;\nlet _legacyConfig: Config;\nlet _logger: LoggerService;\n\nexport function setFallbackEndpointConfig(account: PagerDutyAccountConfig) {\n  fallbackEndpointConfig = {\n    eventsBaseUrl:\n      account.eventsBaseUrl !== undefined\n        ? account.eventsBaseUrl\n        : 'https://events.pagerduty.com/v2',\n    apiBaseUrl:\n      account.apiBaseUrl !== undefined\n        ? account.apiBaseUrl\n        : 'https://api.pagerduty.com',\n  };\n}\n\nexport function insertEndpointConfig(account: PagerDutyAccountConfig) {\n  EndpointConfig[account.id] = {\n    eventsBaseUrl:\n      account.eventsBaseUrl !== undefined\n        ? account.eventsBaseUrl\n        : 'https://events.pagerduty.com/v2',\n    apiBaseUrl:\n      account.apiBaseUrl !== undefined\n        ? account.apiBaseUrl\n        : 'https://api.pagerduty.com',\n  };\n}\n\nexport function loadPagerDutyEndpointsFromConfig({\n  config,\n  legacyConfig,\n  logger,\n}: LoadEndpointConfigProps) {\n  // set config and logger\n  _config = config;\n  _legacyConfig = legacyConfig;\n  _logger = logger;\n\n  if (readOptionalObject('pagerDuty.accounts')) {\n    _logger.debug(\n      `New accounts configuration detected. Loading PagerDuty endpoints from config.`,\n    );\n    isLegacyConfig = false;\n\n    const accounts: PagerDutyAccountConfig[] = JSON.parse(\n      JSON.stringify(readOptionalObject('pagerDuty.accounts')),\n    );\n\n    if (accounts?.length === 1) {\n      _logger.debug(\n        `Single account configuration detected. Loading PagerDuty endpoints from config to 'default'.`,\n      );\n      EndpointConfig.default = {\n        eventsBaseUrl:\n          accounts[0].eventsBaseUrl !== undefined\n            ? accounts[0].eventsBaseUrl\n            : 'https://events.pagerduty.com/v2',\n        apiBaseUrl:\n          accounts[0].apiBaseUrl !== undefined\n            ? accounts[0].apiBaseUrl\n            : 'https://api.pagerduty.com',\n      };\n    } else {\n      _logger.debug(\n        `Multiple account configuration detected. Loading PagerDuty endpoints from config.`,\n      );\n      accounts?.forEach(account => {\n        if (account.isDefault) {\n          setFallbackEndpointConfig(account);\n        }\n\n        insertEndpointConfig(account);\n      });\n    }\n  } else {\n    _logger.debug(`Loading legacy PagerDuty endpoints from config.`);\n    isLegacyConfig = true;\n\n    EndpointConfig.default = {\n      eventsBaseUrl:\n        readOptionalString('pagerDuty.eventsBaseUrl') !== undefined\n          ? readString('pagerDuty.eventsBaseUrl')\n          : 'https://events.pagerduty.com/v2',\n      apiBaseUrl:\n        readOptionalString('pagerDuty.apiBaseUrl') !== undefined\n          ? readString('pagerDuty.apiBaseUrl')\n          : 'https://api.pagerduty.com',\n    };\n  }\n}\n\nexport function getApiBaseUrl(account?: string): string {\n  if (isLegacyConfig === true) {\n    return EndpointConfig.default.apiBaseUrl;\n  }\n\n  if (account) {\n    return EndpointConfig[account].apiBaseUrl;\n  }\n\n  return fallbackEndpointConfig.apiBaseUrl;\n}\n\nexport type CreateServiceProps = {\n  name: string;\n  description: string;\n  escalationPolicyId: string;\n  account?: string;\n  alertGrouping?: string;\n};\n\n// Supporting custom actions\nexport async function createService({\n  name,\n  description,\n  escalationPolicyId,\n  account,\n  alertGrouping,\n}: CreateServiceProps): Promise<CreateServiceResponse> {\n  let alertGroupingParameters = 'null';\n  let response: Response;\n\n  const apiBaseUrl = getApiBaseUrl(account);\n  const baseUrl = `${apiBaseUrl}/services`;\n\n  // Set default body\n  let body = JSON.stringify({\n    service: {\n      type: 'service',\n      name: name,\n      description: description,\n      alert_creation: 'create_alerts_and_incidents',\n      auto_pause_notifications_parameters: {\n        enabled: true,\n        timeout: 300,\n      },\n      escalation_policy: {\n        id: escalationPolicyId,\n        type: 'escalation_policy_reference',\n      },\n    },\n  });\n\n  // Override body if alert grouping is enabled and passed as parameter\n  if (\n    (await isEventNoiseReductionEnabled(account)) &&\n    alertGrouping !== undefined\n  ) {\n    alertGroupingParameters = alertGrouping;\n\n    switch (alertGroupingParameters) {\n      case 'intelligent':\n        body = JSON.stringify({\n          service: {\n            type: 'service',\n            name: name,\n            description: description,\n            escalation_policy: {\n              id: escalationPolicyId,\n              type: 'escalation_policy_reference',\n            },\n            alert_creation: 'create_alerts_and_incidents',\n            alert_grouping_parameters: {\n              type: alertGroupingParameters,\n            },\n            auto_pause_notifications_parameters: {\n              enabled: true,\n              timeout: 300,\n            },\n          },\n        });\n        break;\n      case 'time':\n        body = JSON.stringify({\n          service: {\n            type: 'service',\n            name: name,\n            description: description,\n            escalation_policy: {\n              id: escalationPolicyId,\n              type: 'escalation_policy_reference',\n            },\n            alert_creation: 'create_alerts_and_incidents',\n            alert_grouping_parameters: {\n              type: alertGroupingParameters,\n              config: {\n                timeout: 0,\n              },\n            },\n            auto_pause_notifications_parameters: {\n              enabled: true,\n              timeout: 300,\n            },\n          },\n        });\n        break;\n      case 'content_based':\n        body = JSON.stringify({\n          service: {\n            type: 'service',\n            name: name,\n            description: description,\n            escalation_policy: {\n              id: escalationPolicyId,\n              type: 'escalation_policy_reference',\n            },\n            alert_creation: 'create_alerts_and_incidents',\n            alert_grouping_parameters: {\n              type: alertGroupingParameters,\n              config: {\n                aggregate: 'all',\n                time_window: 0,\n                fields: ['source', 'summary'],\n              },\n            },\n            auto_pause_notifications_parameters: {\n              enabled: true,\n              timeout: 300,\n            },\n          },\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  const token = await getAuthToken(account);\n\n  const options: RequestInit = {\n    method: 'POST',\n    body: body,\n    headers: {\n      Authorization: token,\n      Accept: 'application/vnd.pagerduty+json;version=2',\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(baseUrl, options);\n  } catch (error) {\n    throw new Error(`Failed to create service: ${error}`);\n  }\n\n  switch (response.status) {\n    case 400:\n      throw new Error(\n        `Failed to create service. Caller provided invalid arguments.`,\n      );\n    case 401:\n      throw new Error(\n        `Failed to create service. Caller did not supply credentials or did not provide the correct credentials.`,\n      );\n    case 402:\n      throw new Error(\n        `Failed to create service. Account does not have the abilities to perform the action.`,\n      );\n    case 403:\n      throw new Error(\n        `Failed to create service. Caller is not authorized to view the requested resource.`,\n      );\n    default: // 201\n      break;\n  }\n\n  let result: PagerDutyServiceResponse;\n  try {\n    result = (await response.json()) as PagerDutyServiceResponse;\n\n    const createServiceResult: CreateServiceResponse = {\n      url: result.service.html_url,\n      id: result.service.id,\n      alertGrouping: alertGroupingParameters,\n    };\n\n    return createServiceResult;\n  } catch (error) {\n    throw new Error(`Failed to parse service information: ${error}`);\n  }\n}\n\nexport type CreateServiceIntegrationProps = {\n  serviceId: string;\n  vendorId: string;\n  account?: string;\n};\n\nexport async function createServiceIntegration({\n  serviceId,\n  vendorId,\n  account,\n}: CreateServiceIntegrationProps): Promise<string> {\n  let response: Response;\n\n  const apiBaseUrl = getApiBaseUrl(account);\n  const baseUrl = `${apiBaseUrl}/services`;\n  const token = await getAuthToken(account);\n\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      integration: {\n        name: 'Backstage',\n        service: {\n          id: serviceId,\n          type: 'service_reference',\n        },\n        vendor: {\n          id: vendorId,\n          type: 'vendor_reference',\n        },\n      },\n    }),\n    headers: {\n      Authorization: token,\n      Accept: 'application/vnd.pagerduty+json;version=2',\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${baseUrl}/${serviceId}/integrations`, options);\n  } catch (error) {\n    throw new Error(`Failed to create service integration: ${error}`);\n  }\n\n  switch (response.status) {\n    case 400:\n      throw new Error(\n        `Failed to create service integration. Caller provided invalid arguments.`,\n      );\n    case 401:\n      throw new Error(\n        `Failed to create service integration. Caller did not supply credentials or did not provide the correct credentials.`,\n      );\n    case 403:\n      throw new Error(\n        `Failed to create service integration. Caller is not authorized to view the requested resource.`,\n      );\n    case 429:\n      throw new Error(\n        `Failed to create service integration. Rate limit exceeded.`,\n      );\n    default: // 201\n      break;\n  }\n\n  let result: PagerDutyIntegrationResponse;\n  try {\n    result = (await response.json()) as PagerDutyIntegrationResponse;\n\n    return result.integration.integration_key ?? '';\n  } catch (error) {\n    throw new Error(`Failed to parse service information: ${error}`);\n  }\n}\n\nexport async function isEventNoiseReductionEnabled(\n  account?: string,\n): Promise<boolean> {\n  let response: Response;\n  const baseUrl = getApiBaseUrl(account);\n  const token = await getAuthToken(account);\n\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: token,\n      Accept: 'application/vnd.pagerduty+json;version=2',\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(`${baseUrl}/abilities`, options);\n  } catch (error) {\n    throw new Error(`Failed to read abilities: ${error}`);\n  }\n\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Failed to read abilities. Caller did not supply credentials or did not provide the correct credentials.`,\n      );\n    case 403:\n      throw new Error(\n        `Failed to read abilities. Caller is not authorized to view the requested resource.`,\n      );\n    case 429:\n      throw new Error(`Failed to read abilities. Rate limit exceeded.`);\n    default: // 200\n      break;\n  }\n\n  let result: PagerDutyAbilitiesResponse;\n  try {\n    result = (await response.json()) as PagerDutyAbilitiesResponse;\n\n    if (\n      result.abilities.includes('preview_intelligent_alert_grouping') &&\n      result.abilities.includes('time_based_alert_grouping')\n    ) {\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    throw new Error(`Failed to parse abilities information: ${error}`);\n  }\n}\n\nfunction readOptionalString(key: string): string | undefined {\n  if (!_config) {\n    return _legacyConfig.getOptionalString(key);\n  }\n\n  return _config.getOptionalString(key);\n}\n\nfunction readOptionalObject(key: string): JsonValue | undefined {\n  if (!_config) {\n    return _legacyConfig.getOptional(key);\n  }\n\n  return _config.getOptional(key);\n}\n\nfunction readString(key: string): string {\n  if (!_config) {\n    return _legacyConfig.getString(key);\n  }\n\n  return _config.getString(key);\n}\n\nexport async function getAccountByEscalationPolicyId(\n  escalationPolicyId: string,\n): Promise<string> {\n  const escalationPoliciesList: PagerDutyEscalationPolicy[] =\n    await getAllEscalationPolicies();\n\n  // find escalation policy by id and return account\n  const escalationPolicy = escalationPoliciesList.find(\n    policy => policy.id === escalationPolicyId,\n  );\n\n  return escalationPolicy?.account ?? '';\n}\n\nasync function getEscalationPolicies(\n  offset: number,\n  limit: number,\n  account?: string,\n): Promise<[Boolean, PagerDutyEscalationPolicy[]]> {\n  let response: Response;\n  const params = `total=true&sort_by=name&offset=${offset}&limit=${limit}`;\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: await getAuthToken(account),\n      Accept: 'application/vnd.pagerduty+json;version=2',\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const apiBaseUrl = getApiBaseUrl(account);\n  const baseUrl = `${apiBaseUrl}/escalation_policies`;\n\n  try {\n    response = await fetch(`${baseUrl}?${params}`, options);\n  } catch (error) {\n    throw new Error(`Failed to retrieve escalation policies: ${error}`);\n  }\n\n  switch (response.status) {\n    case 400:\n      throw new HttpError(\n        'Failed to list escalation policies. Caller provided invalid arguments.',\n        400,\n      );\n    case 401:\n      throw new HttpError(\n        'Failed to list escalation policies. Caller did not supply credentials or did not provide the correct credentials.',\n        401,\n      );\n    case 403:\n      throw new HttpError(\n        'Failed to list escalation policies. Caller is not authorized to view the requested resource.',\n        403,\n      );\n    case 429:\n      throw new HttpError(\n        'Failed to list escalation policies. Rate limit exceeded.',\n        429,\n      );\n    default: // 200\n      break;\n  }\n\n  let result: PagerDutyEscalationPoliciesResponse;\n  try {\n    result = (await response.json()) as PagerDutyEscalationPoliciesResponse;\n\n    return [result.more ?? false, result.escalation_policies];\n  } catch (error) {\n    throw new HttpError(\n      `Failed to parse escalation policy information: ${error}`,\n      500,\n    );\n  }\n}\n\nexport async function getAllEscalationPolicies(): Promise<\n  PagerDutyEscalationPolicy[]\n> {\n  const limit = 50;\n  let offset = 0;\n  let moreResults = false;\n  let results: PagerDutyEscalationPolicy[] = [];\n\n  await Promise.all(\n    Object.keys(EndpointConfig).map(async account => {\n      try {\n        // reset offset value\n        offset = 0;\n\n        do {\n          const res = await getEscalationPolicies(offset, limit, account);\n\n          // set account for each escalation policy\n          res[1].forEach(policy => {\n            policy.account = account;\n          });\n\n          // update results\n          results = results.concat(res[1]);\n\n          // if more results exist\n          if (res[0] === true) {\n            moreResults = true;\n            offset += limit;\n          } else {\n            moreResults = false;\n          }\n        } while (moreResults === true);\n      } catch (error) {\n        if (error instanceof HttpError) {\n          throw error;\n        } else {\n          throw new HttpError(`${error}`, 500);\n        }\n      }\n    }),\n  );\n\n  return results;\n}\n","import { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { z } from 'zod';\nimport * as api from '../apis/pagerduty';\nimport { CreateServiceResponse } from '../types';\nimport { loadAuthConfig } from '../auth/auth';\nimport {\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { loadBackendConfig } from '@backstage/backend-common';\nimport {\n  loadPagerDutyEndpointsFromConfig,\n  getAccountByEscalationPolicyId,\n} from '../apis/pagerduty';\n\nexport type CreatePagerDutyServiceActionProps = {\n  config: RootConfigService;\n  logger: LoggerService;\n};\n\nexport const createPagerDutyServiceAction = (\n  props?: CreatePagerDutyServiceActionProps,\n) => {\n  let loggerService: LoggerService;\n\n  return createTemplateAction<{\n    name: string;\n    description: string;\n    escalationPolicyId: string;\n    alertGrouping?: string;\n  }>({\n    id: 'pagerduty:service:create',\n    schema: {\n      input: z.object({\n        name: z\n          .string()\n          .min(1, 'name is required')\n          .describe('Name of the service'),\n        description: z\n          .string()\n          .min(1, 'description is required')\n          .describe('Description of the service'),\n        escalationPolicyId: z\n          .string()\n          .min(1, 'Escalation policy is required')\n          .describe('Escalation policy ID'),\n        alertGrouping: z\n          .string()\n          .optional()\n          .describe('Alert grouping parameters'),\n      }),\n      output: z.object({\n        serviceUrl: z.string().describe('PagerDuty Service URL'),\n        serviceId: z.string().describe('PagerDuty Service ID'),\n        integrationKey: z.string().describe('Backstage Integration Key'),\n      }),\n    },\n\n    async handler(ctx) {\n      try {\n        loggerService = props?.logger ? props.logger : ctx.logger;\n        const configService = props?.config;\n\n        const legacyConfig: Config = await loadBackendConfig({\n          logger: loggerService,\n          argv: [],\n        });\n\n        // Load the auth configuration\n        await loadAuthConfig({\n          config: configService,\n          legacyConfig: legacyConfig,\n          logger: loggerService,\n        });\n\n        // Load endpoint configuration\n        loadPagerDutyEndpointsFromConfig({\n          config: configService,\n          legacyConfig: legacyConfig,\n          logger: loggerService,\n        });\n\n        const account: string = await getAccountByEscalationPolicyId(\n          ctx.input.escalationPolicyId,\n        );\n\n        // Create service in PagerDuty\n        loggerService.info(\n          `Creating service '${ctx.input.name}' in account '${account}'.`,\n        );\n        const service: CreateServiceResponse = await api.createService({\n          name: ctx.input.name,\n          description: ctx.input.description,\n          escalationPolicyId: ctx.input.escalationPolicyId,\n          account: account,\n          alertGrouping: ctx.input.alertGrouping,\n        });\n        loggerService.info(`Service '${ctx.input.name}' created successfully!`);\n        loggerService.info(`Alert grouping set to '${service.alertGrouping}'`);\n\n        ctx.output('serviceUrl', service.url);\n        ctx.output('serviceId', service.id);\n        ctx.output('account', account);\n\n        // Create Backstage Integration in PagerDuty service\n        const backstageIntegrationId = 'PRO19CT'; // ID for Backstage integration\n\n        loggerService.info(\n          `Creating Backstage Integration for service '${ctx.input.name}' in account '${account}'.`,\n        );\n\n        const integrationKey = await api.createServiceIntegration({\n          serviceId: service.id,\n          vendorId: backstageIntegrationId,\n          account,\n        });\n        loggerService.info(\n          `Backstage Integration for service '${ctx.input.name}' created successfully!`,\n        );\n\n        ctx.output('integrationKey', integrationKey);\n      } catch (error) {\n        loggerService.error(`${error}`);\n      }\n    },\n  });\n};\n","import {\n  coreServices,\n  createBackendModule,\n} from '@backstage/backend-plugin-api';\nimport { scaffolderActionsExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';\nimport { createPagerDutyServiceAction } from './actions/custom';\n\n/** @public */\nexport const pagerDutyScaffolderActions = createBackendModule({\n  pluginId: 'scaffolder',\n  moduleId: 'pagerduty-actions',\n  register(env) {\n    env.registerInit({\n      deps: {\n        config: coreServices.rootConfig,\n        logger: coreServices.logger,\n        scaffolder: scaffolderActionsExtensionPoint,\n      },\n      async init({ config, logger, scaffolder }) {\n        scaffolder.addActions(\n          createPagerDutyServiceAction({\n            config,\n            logger,\n          }),\n        );\n      },\n    });\n  },\n});\n"],"names":["isLegacyConfig","_config","_legacyConfig","_logger","readOptionalObject","readOptionalString","readString","HttpError","fetch","createTemplateAction","z","loadBackendConfig","api.createService","api.createServiceIntegration","createBackendModule","coreServices","scaffolderActionsExtensionPoint"],"mappings":"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"}